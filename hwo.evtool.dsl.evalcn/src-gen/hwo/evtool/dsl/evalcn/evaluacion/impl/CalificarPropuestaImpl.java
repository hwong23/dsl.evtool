/**
 * generated by Xtext 2.25.0
 */
package hwo.evtool.dsl.evalcn.evaluacion.impl;

import hwo.evtool.dsl.evalcn.evaluacion.CalificarPropuesta;
import hwo.evtool.dsl.evalcn.evaluacion.CriterioPropuesta;
import hwo.evtool.dsl.evalcn.evaluacion.EvaluacionPackage;
import hwo.evtool.dsl.evalcn.evaluacion.TipoPropuesta;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Calificar Propuesta</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hwo.evtool.dsl.evalcn.evaluacion.impl.CalificarPropuestaImpl#getTipo <em>Tipo</em>}</li>
 *   <li>{@link hwo.evtool.dsl.evalcn.evaluacion.impl.CalificarPropuestaImpl#getCriterios <em>Criterios</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CalificarPropuestaImpl extends EvaluacionImpl implements CalificarPropuesta
{
  /**
   * The default value of the '{@link #getTipo() <em>Tipo</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTipo()
   * @generated
   * @ordered
   */
  protected static final TipoPropuesta TIPO_EDEFAULT = TipoPropuesta.EVALUAR_PROBLEMA;

  /**
   * The cached value of the '{@link #getTipo() <em>Tipo</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTipo()
   * @generated
   * @ordered
   */
  protected TipoPropuesta tipo = TIPO_EDEFAULT;

  /**
   * The cached value of the '{@link #getCriterios() <em>Criterios</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCriterios()
   * @generated
   * @ordered
   */
  protected EList<CriterioPropuesta> criterios;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CalificarPropuestaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EvaluacionPackage.Literals.CALIFICAR_PROPUESTA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TipoPropuesta getTipo()
  {
    return tipo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTipo(TipoPropuesta newTipo)
  {
    TipoPropuesta oldTipo = tipo;
    tipo = newTipo == null ? TIPO_EDEFAULT : newTipo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EvaluacionPackage.CALIFICAR_PROPUESTA__TIPO, oldTipo, tipo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CriterioPropuesta> getCriterios()
  {
    if (criterios == null)
    {
      criterios = new EObjectContainmentEList<CriterioPropuesta>(CriterioPropuesta.class, this, EvaluacionPackage.CALIFICAR_PROPUESTA__CRITERIOS);
    }
    return criterios;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EvaluacionPackage.CALIFICAR_PROPUESTA__CRITERIOS:
        return ((InternalEList<?>)getCriterios()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EvaluacionPackage.CALIFICAR_PROPUESTA__TIPO:
        return getTipo();
      case EvaluacionPackage.CALIFICAR_PROPUESTA__CRITERIOS:
        return getCriterios();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EvaluacionPackage.CALIFICAR_PROPUESTA__TIPO:
        setTipo((TipoPropuesta)newValue);
        return;
      case EvaluacionPackage.CALIFICAR_PROPUESTA__CRITERIOS:
        getCriterios().clear();
        getCriterios().addAll((Collection<? extends CriterioPropuesta>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EvaluacionPackage.CALIFICAR_PROPUESTA__TIPO:
        setTipo(TIPO_EDEFAULT);
        return;
      case EvaluacionPackage.CALIFICAR_PROPUESTA__CRITERIOS:
        getCriterios().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EvaluacionPackage.CALIFICAR_PROPUESTA__TIPO:
        return tipo != TIPO_EDEFAULT;
      case EvaluacionPackage.CALIFICAR_PROPUESTA__CRITERIOS:
        return criterios != null && !criterios.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (tipo: ");
    result.append(tipo);
    result.append(')');
    return result.toString();
  }

} //CalificarPropuestaImpl
