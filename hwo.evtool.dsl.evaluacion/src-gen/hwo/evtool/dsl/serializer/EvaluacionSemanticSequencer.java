/*
 * generated by Xtext 2.25.0
 */
package hwo.evtool.dsl.serializer;

import com.google.inject.Inject;
import hwo.evtool.dsl.evaluacion.BoolConstant;
import hwo.evtool.dsl.evaluacion.CmpntEvaluacion;
import hwo.evtool.dsl.evaluacion.Criterio;
import hwo.evtool.dsl.evaluacion.CriterioComplejoType;
import hwo.evtool.dsl.evaluacion.EvaluacionModel;
import hwo.evtool.dsl.evaluacion.EvaluacionPackage;
import hwo.evtool.dsl.evaluacion.IntConstant;
import hwo.evtool.dsl.evaluacion.StringConstant;
import hwo.evtool.dsl.services.EvaluacionGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EvaluacionSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EvaluacionGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EvaluacionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EvaluacionPackage.BOOL_CONSTANT:
				sequence_Expresion(context, (BoolConstant) semanticObject); 
				return; 
			case EvaluacionPackage.CMPNT_EVALUACION:
				sequence_CmpntEvaluacion(context, (CmpntEvaluacion) semanticObject); 
				return; 
			case EvaluacionPackage.CRITERIO:
				sequence_Criterio(context, (Criterio) semanticObject); 
				return; 
			case EvaluacionPackage.CRITERIO_COMPLEJO_TYPE:
				sequence_CriterioComplejoType(context, (CriterioComplejoType) semanticObject); 
				return; 
			case EvaluacionPackage.EVALUACION_MODEL:
				sequence_EvaluacionModel(context, (EvaluacionModel) semanticObject); 
				return; 
			case EvaluacionPackage.INT_CONSTANT:
				sequence_Expresion(context, (IntConstant) semanticObject); 
				return; 
			case EvaluacionPackage.STRING_CONSTANT:
				sequence_Expresion(context, (StringConstant) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CmpntEvaluacion returns CmpntEvaluacion
	 *
	 * Constraint:
	 *     (name=ID superType=[CmpntEvaluacion|ID]? atributos+=Criterio*)
	 */
	protected void sequence_CmpntEvaluacion(ISerializationContext context, CmpntEvaluacion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Criterio returns CriterioComplejoType
	 *     CriterioComplejoType returns CriterioComplejoType
	 *
	 * Constraint:
	 *     componente=[CmpntEvaluacion|ID]
	 */
	protected void sequence_CriterioComplejoType(ISerializationContext context, CriterioComplejoType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EvaluacionPackage.Literals.CRITERIO_COMPLEJO_TYPE__COMPONENTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvaluacionPackage.Literals.CRITERIO_COMPLEJO_TYPE__COMPONENTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCriterioComplejoTypeAccess().getComponenteCmpntEvaluacionIDTerminalRuleCall_0_1(), semanticObject.eGet(EvaluacionPackage.Literals.CRITERIO_COMPLEJO_TYPE__COMPONENTE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Criterio returns Criterio
	 *
	 * Constraint:
	 *     (name=ID expresion=Expresion soporte=Expresion?)
	 */
	protected void sequence_Criterio(ISerializationContext context, Criterio semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvaluacionModel returns EvaluacionModel
	 *
	 * Constraint:
	 *     componentes+=CmpntEvaluacion+
	 */
	protected void sequence_EvaluacionModel(ISerializationContext context, EvaluacionModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns BoolConstant
	 *
	 * Constraint:
	 *     (valor='S' | valor='N')
	 */
	protected void sequence_Expresion(ISerializationContext context, BoolConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns IntConstant
	 *
	 * Constraint:
	 *     valor=INT
	 */
	protected void sequence_Expresion(ISerializationContext context, IntConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EvaluacionPackage.Literals.INT_CONSTANT__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvaluacionPackage.Literals.INT_CONSTANT__VALOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpresionAccess().getValorINTTerminalRuleCall_0_1_0(), semanticObject.getValor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns StringConstant
	 *
	 * Constraint:
	 *     valor=STRING
	 */
	protected void sequence_Expresion(ISerializationContext context, StringConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EvaluacionPackage.Literals.STRING_CONSTANT__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvaluacionPackage.Literals.STRING_CONSTANT__VALOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpresionAccess().getValorSTRINGTerminalRuleCall_1_1_0(), semanticObject.getValor());
		feeder.finish();
	}
	
	
}
