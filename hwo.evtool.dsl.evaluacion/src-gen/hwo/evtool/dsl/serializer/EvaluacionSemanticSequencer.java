/*
 * generated by Xtext 2.24.0
 */
package hwo.evtool.dsl.serializer;

import com.google.inject.Inject;
import hwo.evtool.dsl.evaluacion.Componente;
import hwo.evtool.dsl.evaluacion.EvaluacionPackage;
import hwo.evtool.dsl.evaluacion.Evaluaciones;
import hwo.evtool.dsl.evaluacion.Evento;
import hwo.evtool.dsl.evaluacion.Expresion;
import hwo.evtool.dsl.evaluacion.MaquinaEstados;
import hwo.evtool.dsl.evaluacion.Transicion;
import hwo.evtool.dsl.services.EvaluacionGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EvaluacionSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EvaluacionGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EvaluacionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EvaluacionPackage.COMPONENTE:
				sequence_Componente(context, (Componente) semanticObject); 
				return; 
			case EvaluacionPackage.EVALUACIONES:
				sequence_Evaluaciones(context, (Evaluaciones) semanticObject); 
				return; 
			case EvaluacionPackage.EVENTO:
				sequence_Evento(context, (Evento) semanticObject); 
				return; 
			case EvaluacionPackage.EXPRESION:
				if (rule == grammarAccess.getEvaluarEquipoRule()
						|| rule == grammarAccess.getEvaluarPropuestaRule()) {
					sequence_EvaluarEquipo_EvaluarPropuesta(context, (Expresion) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpresionRule()) {
					sequence_Expresion(context, (Expresion) semanticObject); 
					return; 
				}
				else break;
			case EvaluacionPackage.MAQUINA_ESTADOS:
				sequence_MaquinaEstados(context, (MaquinaEstados) semanticObject); 
				return; 
			case EvaluacionPackage.TRANSICION:
				sequence_Transicion(context, (Transicion) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Componente returns Componente
	 *
	 * Constraint:
	 *     (name=ID actions+=[Evaluaciones|ID]* transitions+=Transicion*)
	 */
	protected void sequence_Componente(ISerializationContext context, Componente semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Evaluaciones returns Evaluaciones
	 *
	 * Constraint:
	 *     (name=ID expresion=Expresion comentario=STRING?)
	 */
	protected void sequence_Evaluaciones(ISerializationContext context, Evaluaciones semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvaluarEquipo returns Expresion
	 *     EvaluarPropuesta returns Expresion
	 *
	 * Constraint:
	 *     {Expresion}
	 */
	protected void sequence_EvaluarEquipo_EvaluarPropuesta(ISerializationContext context, Expresion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Evento returns Evento
	 *
	 * Constraint:
	 *     (name=ID code=ID)
	 */
	protected void sequence_Evento(ISerializationContext context, Evento semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EvaluacionPackage.Literals.EVENTO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvaluacionPackage.Literals.EVENTO__NAME));
			if (transientValues.isValueTransient(semanticObject, EvaluacionPackage.Literals.EVENTO__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvaluacionPackage.Literals.EVENTO__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventoAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEventoAccess().getCodeIDTerminalRuleCall_1_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns Expresion
	 *
	 * Constraint:
	 *     (calificacion=EvaluarPropuesta | calificacion=EvaluarEquipo)
	 */
	protected void sequence_Expresion(ISerializationContext context, Expresion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MaquinaEstados returns MaquinaEstados
	 *
	 * Constraint:
	 *     (events+=Evento* resetEvents+=[Evento|ID]* commands+=Evaluaciones* states+=Componente*)
	 */
	protected void sequence_MaquinaEstados(ISerializationContext context, MaquinaEstados semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transicion returns Transicion
	 *
	 * Constraint:
	 *     (event=[Evento|ID] state=[Componente|ID])
	 */
	protected void sequence_Transicion(ISerializationContext context, Transicion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EvaluacionPackage.Literals.TRANSICION__EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvaluacionPackage.Literals.TRANSICION__EVENT));
			if (transientValues.isValueTransient(semanticObject, EvaluacionPackage.Literals.TRANSICION__STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvaluacionPackage.Literals.TRANSICION__STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransicionAccess().getEventEventoIDTerminalRuleCall_0_0_1(), semanticObject.eGet(EvaluacionPackage.Literals.TRANSICION__EVENT, false));
		feeder.accept(grammarAccess.getTransicionAccess().getStateComponenteIDTerminalRuleCall_2_0_1(), semanticObject.eGet(EvaluacionPackage.Literals.TRANSICION__STATE, false));
		feeder.finish();
	}
	
	
}
