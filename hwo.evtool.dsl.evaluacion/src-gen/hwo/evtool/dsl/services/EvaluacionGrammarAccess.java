/*
 * generated by Xtext 2.24.0
 */
package hwo.evtool.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EvaluacionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MaquinaEstadosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.MaquinaEstados");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMaquinaEstadosAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEventosKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEventsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEventsEventoParserRuleCall_1_1_0 = (RuleCall)cEventsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cResetEventsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResetEventsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cResetEventsEventoCrossReference_2_1_0 = (CrossReference)cResetEventsAssignment_2_1.eContents().get(0);
		private final RuleCall cResetEventsEventoIDTerminalRuleCall_2_1_0_1 = (RuleCall)cResetEventsEventoCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEvaluacionesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCommandsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCommandsEvaluacionesParserRuleCall_3_1_0 = (RuleCall)cCommandsAssignment_3_1.eContents().get(0);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesComponenteParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		
		//MaquinaEstados:
		//	{MaquinaEstados} ('eventos'
		//	events+=Evento+)? ('resetEvents'
		//	resetEvents+=[Evento]+)? ('evaluaciones'
		//	commands+=Evaluaciones+)?
		//	states+=Componente*;
		@Override public ParserRule getRule() { return rule; }
		
		//{MaquinaEstados} ('eventos'
		//events+=Evento+)? ('resetEvents'
		//resetEvents+=[Evento]+)? ('evaluaciones'
		//commands+=Evaluaciones+)?
		//states+=Componente*
		public Group getGroup() { return cGroup; }
		
		//{MaquinaEstados}
		public Action getMaquinaEstadosAction_0() { return cMaquinaEstadosAction_0; }
		
		//('eventos'
		//events+=Evento+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'eventos'
		public Keyword getEventosKeyword_1_0() { return cEventosKeyword_1_0; }
		
		//events+=Evento+
		public Assignment getEventsAssignment_1_1() { return cEventsAssignment_1_1; }
		
		//Evento
		public RuleCall getEventsEventoParserRuleCall_1_1_0() { return cEventsEventoParserRuleCall_1_1_0; }
		
		//('resetEvents'
		//resetEvents+=[Evento]+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'resetEvents'
		public Keyword getResetEventsKeyword_2_0() { return cResetEventsKeyword_2_0; }
		
		//resetEvents+=[Evento]+
		public Assignment getResetEventsAssignment_2_1() { return cResetEventsAssignment_2_1; }
		
		//[Evento]
		public CrossReference getResetEventsEventoCrossReference_2_1_0() { return cResetEventsEventoCrossReference_2_1_0; }
		
		//ID
		public RuleCall getResetEventsEventoIDTerminalRuleCall_2_1_0_1() { return cResetEventsEventoIDTerminalRuleCall_2_1_0_1; }
		
		//('evaluaciones'
		//commands+=Evaluaciones+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'evaluaciones'
		public Keyword getEvaluacionesKeyword_3_0() { return cEvaluacionesKeyword_3_0; }
		
		//commands+=Evaluaciones+
		public Assignment getCommandsAssignment_3_1() { return cCommandsAssignment_3_1; }
		
		//Evaluaciones
		public RuleCall getCommandsEvaluacionesParserRuleCall_3_1_0() { return cCommandsEvaluacionesParserRuleCall_3_1_0; }
		
		//states+=Componente*
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }
		
		//Componente
		public RuleCall getStatesComponenteParserRuleCall_4_0() { return cStatesComponenteParserRuleCall_4_0; }
	}
	public class EventoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.Evento");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeIDTerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//Evento:
		//	name=ID code=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID code=ID
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//code=ID
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//ID
		public RuleCall getCodeIDTerminalRuleCall_1_0() { return cCodeIDTerminalRuleCall_1_0; }
	}
	public class EvaluacionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.Evaluaciones");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cArgumentoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentoAtomoParserRuleCall_1_0 = (RuleCall)cArgumentoAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cComentarioAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cComentarioSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cComentarioAssignment_2_1.eContents().get(0);
		
		//Evaluaciones:
		//	name=ID argumento=Atomo (':' comentario=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID argumento=Atomo (':' comentario=STRING)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//argumento=Atomo
		public Assignment getArgumentoAssignment_1() { return cArgumentoAssignment_1; }
		
		//Atomo
		public RuleCall getArgumentoAtomoParserRuleCall_1_0() { return cArgumentoAtomoParserRuleCall_1_0; }
		
		//(':' comentario=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//comentario=STRING
		public Assignment getComentarioAssignment_2_1() { return cComentarioAssignment_2_1; }
		
		//STRING
		public RuleCall getComentarioSTRINGTerminalRuleCall_2_1_0() { return cComentarioSTRINGTerminalRuleCall_2_1_0; }
	}
	public class AtomoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.Atomo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValorPuntuacionParserRuleCall_0_1_0 = (RuleCall)cValorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cProptConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValorItemPropuestaParserRuleCall_1_1_0 = (RuleCall)cValorAssignment_1_1.eContents().get(0);
		
		//Atomo:
		//	{IntConstant} valor=Puntuacion | {ProptConstant} valor=ItemPropuesta;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} valor=Puntuacion | {ProptConstant} valor=ItemPropuesta
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} valor=Puntuacion
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//valor=Puntuacion
		public Assignment getValorAssignment_0_1() { return cValorAssignment_0_1; }
		
		//Puntuacion
		public RuleCall getValorPuntuacionParserRuleCall_0_1_0() { return cValorPuntuacionParserRuleCall_0_1_0; }
		
		//{ProptConstant} valor=ItemPropuesta
		public Group getGroup_1() { return cGroup_1; }
		
		//{ProptConstant}
		public Action getProptConstantAction_1_0() { return cProptConstantAction_1_0; }
		
		//valor=ItemPropuesta
		public Assignment getValorAssignment_1_1() { return cValorAssignment_1_1; }
		
		//ItemPropuesta
		public RuleCall getValorItemPropuestaParserRuleCall_1_1_0() { return cValorItemPropuestaParserRuleCall_1_1_0; }
	}
	public class ItemPropuestaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.ItemPropuesta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTipoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTipoAlternatives_2_0 = (Alternatives)cTipoAssignment_2.eContents().get(0);
		private final Keyword cTipoProblemaKeyword_2_0_0 = (Keyword)cTipoAlternatives_2_0.eContents().get(0);
		private final Keyword cTipoTecnicaKeyword_2_0_1 = (Keyword)cTipoAlternatives_2_0.eContents().get(1);
		private final Keyword cCalificacionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCalificacionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cCalificacionAlternatives_5_0 = (Alternatives)cCalificacionAssignment_5.eContents().get(0);
		private final Keyword cCalificacionAKeyword_5_0_0 = (Keyword)cCalificacionAlternatives_5_0.eContents().get(0);
		private final Keyword cCalificacionMKeyword_5_0_1 = (Keyword)cCalificacionAlternatives_5_0.eContents().get(1);
		private final Keyword cCalificacionBKeyword_5_0_2 = (Keyword)cCalificacionAlternatives_5_0.eContents().get(2);
		
		//ItemPropuesta:
		//	'tipo' ':' tipo=('problema' | 'tecnica') 'calificacion' ':' calificacion=('A' | 'M' | 'B');
		@Override public ParserRule getRule() { return rule; }
		
		//'tipo' ':' tipo=('problema' | 'tecnica') 'calificacion' ':' calificacion=('A' | 'M' | 'B')
		public Group getGroup() { return cGroup; }
		
		//'tipo'
		public Keyword getTipoKeyword_0() { return cTipoKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//tipo=('problema' | 'tecnica')
		public Assignment getTipoAssignment_2() { return cTipoAssignment_2; }
		
		//('problema' | 'tecnica')
		public Alternatives getTipoAlternatives_2_0() { return cTipoAlternatives_2_0; }
		
		//'problema'
		public Keyword getTipoProblemaKeyword_2_0_0() { return cTipoProblemaKeyword_2_0_0; }
		
		//'tecnica'
		public Keyword getTipoTecnicaKeyword_2_0_1() { return cTipoTecnicaKeyword_2_0_1; }
		
		//'calificacion'
		public Keyword getCalificacionKeyword_3() { return cCalificacionKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//calificacion=('A' | 'M' | 'B')
		public Assignment getCalificacionAssignment_5() { return cCalificacionAssignment_5; }
		
		//('A' | 'M' | 'B')
		public Alternatives getCalificacionAlternatives_5_0() { return cCalificacionAlternatives_5_0; }
		
		//'A'
		public Keyword getCalificacionAKeyword_5_0_0() { return cCalificacionAKeyword_5_0_0; }
		
		//'M'
		public Keyword getCalificacionMKeyword_5_0_1() { return cCalificacionMKeyword_5_0_1; }
		
		//'B'
		public Keyword getCalificacionBKeyword_5_0_2() { return cCalificacionBKeyword_5_0_2; }
	}
	public class PuntuacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.Puntuacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNotaINTTerminalRuleCall_0_0 = (RuleCall)cNotaAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalificacionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalificacionINTTerminalRuleCall_2_0 = (RuleCall)cCalificacionAssignment_2.eContents().get(0);
		
		//Puntuacion:
		//	nota=INT '/' calificacion=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//nota=INT '/' calificacion=INT
		public Group getGroup() { return cGroup; }
		
		//nota=INT
		public Assignment getNotaAssignment_0() { return cNotaAssignment_0; }
		
		//INT
		public RuleCall getNotaINTTerminalRuleCall_0_0() { return cNotaINTTerminalRuleCall_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//calificacion=INT
		public Assignment getCalificacionAssignment_2() { return cCalificacionAssignment_2; }
		
		//INT
		public RuleCall getCalificacionINTTerminalRuleCall_2_0() { return cCalificacionINTTerminalRuleCall_2_0; }
	}
	public class ComponenteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.Componente");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponenteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cActionsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cActionsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cActionsEvaluacionesCrossReference_2_2_0 = (CrossReference)cActionsAssignment_2_2.eContents().get(0);
		private final RuleCall cActionsEvaluacionesIDTerminalRuleCall_2_2_0_1 = (RuleCall)cActionsEvaluacionesCrossReference_2_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cTransitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransitionsTransicionParserRuleCall_3_0 = (RuleCall)cTransitionsAssignment_3.eContents().get(0);
		
		//Componente:
		//	'componente' name=ID ('actions' '{' actions+=[Evaluaciones]+ '}')?
		//	transitions+=Transicion*;
		@Override public ParserRule getRule() { return rule; }
		
		//'componente' name=ID ('actions' '{' actions+=[Evaluaciones]+ '}')?
		//transitions+=Transicion*
		public Group getGroup() { return cGroup; }
		
		//'componente'
		public Keyword getComponenteKeyword_0() { return cComponenteKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('actions' '{' actions+=[Evaluaciones]+ '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'actions'
		public Keyword getActionsKeyword_2_0() { return cActionsKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//actions+=[Evaluaciones]+
		public Assignment getActionsAssignment_2_2() { return cActionsAssignment_2_2; }
		
		//[Evaluaciones]
		public CrossReference getActionsEvaluacionesCrossReference_2_2_0() { return cActionsEvaluacionesCrossReference_2_2_0; }
		
		//ID
		public RuleCall getActionsEvaluacionesIDTerminalRuleCall_2_2_0_1() { return cActionsEvaluacionesIDTerminalRuleCall_2_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
		
		//transitions+=Transicion*
		public Assignment getTransitionsAssignment_3() { return cTransitionsAssignment_3; }
		
		//Transicion
		public RuleCall getTransitionsTransicionParserRuleCall_3_0() { return cTransitionsTransicionParserRuleCall_3_0; }
	}
	public class TransicionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.Transicion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEventoCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEventoIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEventoCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateComponenteCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateComponenteIDTerminalRuleCall_2_0_1 = (RuleCall)cStateComponenteCrossReference_2_0.eContents().get(1);
		
		//Transicion:
		//	event=[Evento] '=>' state=[Componente];
		@Override public ParserRule getRule() { return rule; }
		
		//event=[Evento] '=>' state=[Componente]
		public Group getGroup() { return cGroup; }
		
		//event=[Evento]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//[Evento]
		public CrossReference getEventEventoCrossReference_0_0() { return cEventEventoCrossReference_0_0; }
		
		//ID
		public RuleCall getEventEventoIDTerminalRuleCall_0_0_1() { return cEventEventoIDTerminalRuleCall_0_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//state=[Componente]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[Componente]
		public CrossReference getStateComponenteCrossReference_2_0() { return cStateComponenteCrossReference_2_0; }
		
		//ID
		public RuleCall getStateComponenteIDTerminalRuleCall_2_0_1() { return cStateComponenteIDTerminalRuleCall_2_0_1; }
	}
	
	
	private final MaquinaEstadosElements pMaquinaEstados;
	private final EventoElements pEvento;
	private final EvaluacionesElements pEvaluaciones;
	private final AtomoElements pAtomo;
	private final ItemPropuestaElements pItemPropuesta;
	private final PuntuacionElements pPuntuacion;
	private final ComponenteElements pComponente;
	private final TransicionElements pTransicion;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EvaluacionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMaquinaEstados = new MaquinaEstadosElements();
		this.pEvento = new EventoElements();
		this.pEvaluaciones = new EvaluacionesElements();
		this.pAtomo = new AtomoElements();
		this.pItemPropuesta = new ItemPropuestaElements();
		this.pPuntuacion = new PuntuacionElements();
		this.pComponente = new ComponenteElements();
		this.pTransicion = new TransicionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hwo.evtool.dsl.Evaluacion".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MaquinaEstados:
	//	{MaquinaEstados} ('eventos'
	//	events+=Evento+)? ('resetEvents'
	//	resetEvents+=[Evento]+)? ('evaluaciones'
	//	commands+=Evaluaciones+)?
	//	states+=Componente*;
	public MaquinaEstadosElements getMaquinaEstadosAccess() {
		return pMaquinaEstados;
	}
	
	public ParserRule getMaquinaEstadosRule() {
		return getMaquinaEstadosAccess().getRule();
	}
	
	//Evento:
	//	name=ID code=ID;
	public EventoElements getEventoAccess() {
		return pEvento;
	}
	
	public ParserRule getEventoRule() {
		return getEventoAccess().getRule();
	}
	
	//Evaluaciones:
	//	name=ID argumento=Atomo (':' comentario=STRING)?;
	public EvaluacionesElements getEvaluacionesAccess() {
		return pEvaluaciones;
	}
	
	public ParserRule getEvaluacionesRule() {
		return getEvaluacionesAccess().getRule();
	}
	
	//Atomo:
	//	{IntConstant} valor=Puntuacion | {ProptConstant} valor=ItemPropuesta;
	public AtomoElements getAtomoAccess() {
		return pAtomo;
	}
	
	public ParserRule getAtomoRule() {
		return getAtomoAccess().getRule();
	}
	
	//ItemPropuesta:
	//	'tipo' ':' tipo=('problema' | 'tecnica') 'calificacion' ':' calificacion=('A' | 'M' | 'B');
	public ItemPropuestaElements getItemPropuestaAccess() {
		return pItemPropuesta;
	}
	
	public ParserRule getItemPropuestaRule() {
		return getItemPropuestaAccess().getRule();
	}
	
	//Puntuacion:
	//	nota=INT '/' calificacion=INT;
	public PuntuacionElements getPuntuacionAccess() {
		return pPuntuacion;
	}
	
	public ParserRule getPuntuacionRule() {
		return getPuntuacionAccess().getRule();
	}
	
	//Componente:
	//	'componente' name=ID ('actions' '{' actions+=[Evaluaciones]+ '}')?
	//	transitions+=Transicion*;
	public ComponenteElements getComponenteAccess() {
		return pComponente;
	}
	
	public ParserRule getComponenteRule() {
		return getComponenteAccess().getRule();
	}
	
	//Transicion:
	//	event=[Evento] '=>' state=[Componente];
	public TransicionElements getTransicionAccess() {
		return pTransicion;
	}
	
	public ParserRule getTransicionRule() {
		return getTransicionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
