/*
 * generated by Xtext 2.24.0
 */
package hwo.evtool.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EvaluacionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MaquinaEstadosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.MaquinaEstados");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMaquinaEstadosAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEventosKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEventsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEventsEventoParserRuleCall_1_1_0 = (RuleCall)cEventsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cResetEventsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResetEventsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cResetEventsEventoCrossReference_2_1_0 = (CrossReference)cResetEventsAssignment_2_1.eContents().get(0);
		private final RuleCall cResetEventsEventoIDTerminalRuleCall_2_1_0_1 = (RuleCall)cResetEventsEventoCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEvaluacionesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCommandsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCommandsEvaluacionesParserRuleCall_3_1_0 = (RuleCall)cCommandsAssignment_3_1.eContents().get(0);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesComponenteParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		
		//MaquinaEstados:
		//	{MaquinaEstados} ('eventos'
		//	events+=Evento+)? ('resetEvents'
		//	resetEvents+=[Evento]+)? ('evaluaciones'
		//	commands+=Evaluaciones+)?
		//	states+=Componente*;
		@Override public ParserRule getRule() { return rule; }
		
		//{MaquinaEstados} ('eventos'
		//events+=Evento+)? ('resetEvents'
		//resetEvents+=[Evento]+)? ('evaluaciones'
		//commands+=Evaluaciones+)?
		//states+=Componente*
		public Group getGroup() { return cGroup; }
		
		//{MaquinaEstados}
		public Action getMaquinaEstadosAction_0() { return cMaquinaEstadosAction_0; }
		
		//('eventos'
		//events+=Evento+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'eventos'
		public Keyword getEventosKeyword_1_0() { return cEventosKeyword_1_0; }
		
		//events+=Evento+
		public Assignment getEventsAssignment_1_1() { return cEventsAssignment_1_1; }
		
		//Evento
		public RuleCall getEventsEventoParserRuleCall_1_1_0() { return cEventsEventoParserRuleCall_1_1_0; }
		
		//('resetEvents'
		//resetEvents+=[Evento]+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'resetEvents'
		public Keyword getResetEventsKeyword_2_0() { return cResetEventsKeyword_2_0; }
		
		//resetEvents+=[Evento]+
		public Assignment getResetEventsAssignment_2_1() { return cResetEventsAssignment_2_1; }
		
		//[Evento]
		public CrossReference getResetEventsEventoCrossReference_2_1_0() { return cResetEventsEventoCrossReference_2_1_0; }
		
		//ID
		public RuleCall getResetEventsEventoIDTerminalRuleCall_2_1_0_1() { return cResetEventsEventoIDTerminalRuleCall_2_1_0_1; }
		
		//('evaluaciones'
		//commands+=Evaluaciones+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'evaluaciones'
		public Keyword getEvaluacionesKeyword_3_0() { return cEvaluacionesKeyword_3_0; }
		
		//commands+=Evaluaciones+
		public Assignment getCommandsAssignment_3_1() { return cCommandsAssignment_3_1; }
		
		//Evaluaciones
		public RuleCall getCommandsEvaluacionesParserRuleCall_3_1_0() { return cCommandsEvaluacionesParserRuleCall_3_1_0; }
		
		//states+=Componente*
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }
		
		//Componente
		public RuleCall getStatesComponenteParserRuleCall_4_0() { return cStatesComponenteParserRuleCall_4_0; }
	}
	public class EventoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.Evento");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeIDTerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//Evento:
		//	name=ID code=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID code=ID
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//code=ID
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//ID
		public RuleCall getCodeIDTerminalRuleCall_1_0() { return cCodeIDTerminalRuleCall_1_0; }
	}
	public class ComponenteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.Componente");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponenteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cActionsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cActionsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cActionsEvaluacionesCrossReference_2_2_0 = (CrossReference)cActionsAssignment_2_2.eContents().get(0);
		private final RuleCall cActionsEvaluacionesIDTerminalRuleCall_2_2_0_1 = (RuleCall)cActionsEvaluacionesCrossReference_2_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cTransitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransitionsTransicionParserRuleCall_3_0 = (RuleCall)cTransitionsAssignment_3.eContents().get(0);
		
		//Componente:
		//	'componente' name=ID ('actions' '{' actions+=[Evaluaciones]+ '}')?
		//	transitions+=Transicion*;
		@Override public ParserRule getRule() { return rule; }
		
		//'componente' name=ID ('actions' '{' actions+=[Evaluaciones]+ '}')?
		//transitions+=Transicion*
		public Group getGroup() { return cGroup; }
		
		//'componente'
		public Keyword getComponenteKeyword_0() { return cComponenteKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('actions' '{' actions+=[Evaluaciones]+ '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'actions'
		public Keyword getActionsKeyword_2_0() { return cActionsKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//actions+=[Evaluaciones]+
		public Assignment getActionsAssignment_2_2() { return cActionsAssignment_2_2; }
		
		//[Evaluaciones]
		public CrossReference getActionsEvaluacionesCrossReference_2_2_0() { return cActionsEvaluacionesCrossReference_2_2_0; }
		
		//ID
		public RuleCall getActionsEvaluacionesIDTerminalRuleCall_2_2_0_1() { return cActionsEvaluacionesIDTerminalRuleCall_2_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
		
		//transitions+=Transicion*
		public Assignment getTransitionsAssignment_3() { return cTransitionsAssignment_3; }
		
		//Transicion
		public RuleCall getTransitionsTransicionParserRuleCall_3_0() { return cTransitionsTransicionParserRuleCall_3_0; }
	}
	public class EvaluacionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.Evaluaciones");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTipoEvaluacionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpresionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpresionExpresionParserRuleCall_2_0 = (RuleCall)cExpresionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cComentarioAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cComentarioSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cComentarioAssignment_3_1.eContents().get(0);
		
		//Evaluaciones:
		//	TipoEvaluacion name=ID expresion=Expresion (':' comentario=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//TipoEvaluacion name=ID expresion=Expresion (':' comentario=STRING)?
		public Group getGroup() { return cGroup; }
		
		//TipoEvaluacion
		public RuleCall getTipoEvaluacionParserRuleCall_0() { return cTipoEvaluacionParserRuleCall_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//expresion=Expresion
		public Assignment getExpresionAssignment_2() { return cExpresionAssignment_2; }
		
		//Expresion
		public RuleCall getExpresionExpresionParserRuleCall_2_0() { return cExpresionExpresionParserRuleCall_2_0; }
		
		//(':' comentario=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//comentario=STRING
		public Assignment getComentarioAssignment_3_1() { return cComentarioAssignment_3_1; }
		
		//STRING
		public RuleCall getComentarioSTRINGTerminalRuleCall_3_1_0() { return cComentarioSTRINGTerminalRuleCall_3_1_0; }
	}
	public class ExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.Expresion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCalificacionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalificacionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cCalificacionAlternatives_2_0 = (Alternatives)cCalificacionAssignment_2.eContents().get(0);
		private final RuleCall cCalificacionEvaluarPropuestaParserRuleCall_2_0_0 = (RuleCall)cCalificacionAlternatives_2_0.eContents().get(0);
		private final RuleCall cCalificacionEvaluarEquipoParserRuleCall_2_0_1 = (RuleCall)cCalificacionAlternatives_2_0.eContents().get(1);
		
		//Expresion:
		//	'calificacion' ':' calificacion=(EvaluarPropuesta | EvaluarEquipo);
		@Override public ParserRule getRule() { return rule; }
		
		//'calificacion' ':' calificacion=(EvaluarPropuesta | EvaluarEquipo)
		public Group getGroup() { return cGroup; }
		
		//'calificacion'
		public Keyword getCalificacionKeyword_0() { return cCalificacionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//calificacion=(EvaluarPropuesta | EvaluarEquipo)
		public Assignment getCalificacionAssignment_2() { return cCalificacionAssignment_2; }
		
		//(EvaluarPropuesta | EvaluarEquipo)
		public Alternatives getCalificacionAlternatives_2_0() { return cCalificacionAlternatives_2_0; }
		
		//EvaluarPropuesta
		public RuleCall getCalificacionEvaluarPropuestaParserRuleCall_2_0_0() { return cCalificacionEvaluarPropuestaParserRuleCall_2_0_0; }
		
		//EvaluarEquipo
		public RuleCall getCalificacionEvaluarEquipoParserRuleCall_2_0_1() { return cCalificacionEvaluarEquipoParserRuleCall_2_0_1; }
	}
	public class EvaluarEquipoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.EvaluarEquipo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpresionAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EvaluarEquipo Expresion:
		//	{Expresion} INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expresion} INT
		public Group getGroup() { return cGroup; }
		
		//{Expresion}
		public Action getExpresionAction_0() { return cExpresionAction_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EvaluarPropuestaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.EvaluarPropuesta");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpresionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExpresionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExpresionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cBKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//EvaluarPropuesta Expresion:
		//	{Expresion} 'A' | {Expresion} 'M' | {Expresion} 'B';
		@Override public ParserRule getRule() { return rule; }
		
		//{Expresion} 'A' | {Expresion} 'M' | {Expresion} 'B'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Expresion} 'A'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Expresion}
		public Action getExpresionAction_0_0() { return cExpresionAction_0_0; }
		
		//'A'
		public Keyword getAKeyword_0_1() { return cAKeyword_0_1; }
		
		//{Expresion} 'M'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expresion}
		public Action getExpresionAction_1_0() { return cExpresionAction_1_0; }
		
		//'M'
		public Keyword getMKeyword_1_1() { return cMKeyword_1_1; }
		
		//{Expresion} 'B'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Expresion}
		public Action getExpresionAction_2_0() { return cExpresionAction_2_0; }
		
		//'B'
		public Keyword getBKeyword_2_1() { return cBKeyword_2_1; }
	}
	public class TipoEvaluacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.TipoEvaluacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTipoEvaluarPropuestaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTipoEvaluarEquipoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TipoEvaluacion:
		//	TipoEvaluarPropuesta | TipoEvaluarEquipo;
		@Override public ParserRule getRule() { return rule; }
		
		//TipoEvaluarPropuesta | TipoEvaluarEquipo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TipoEvaluarPropuesta
		public RuleCall getTipoEvaluarPropuestaParserRuleCall_0() { return cTipoEvaluarPropuestaParserRuleCall_0; }
		
		//TipoEvaluarEquipo
		public RuleCall getTipoEvaluarEquipoParserRuleCall_1() { return cTipoEvaluarEquipoParserRuleCall_1; }
	}
	public class TipoEvaluarEquipoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.TipoEvaluarEquipo");
		private final Keyword cEvaluarArquitectoKeyword = (Keyword)rule.eContents().get(1);
		
		//TipoEvaluarEquipo:
		//	'EvaluarArquitecto';
		@Override public ParserRule getRule() { return rule; }
		
		//'EvaluarArquitecto'
		public Keyword getEvaluarArquitectoKeyword() { return cEvaluarArquitectoKeyword; }
	}
	public class TipoEvaluarPropuestaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.TipoEvaluarPropuesta");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEvaluarProblemaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEvaluarTecnicaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TipoEvaluarPropuesta:
		//	'EvaluarProblema' | 'EvaluarTecnica';
		@Override public ParserRule getRule() { return rule; }
		
		//'EvaluarProblema' | 'EvaluarTecnica'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'EvaluarProblema'
		public Keyword getEvaluarProblemaKeyword_0() { return cEvaluarProblemaKeyword_0; }
		
		//'EvaluarTecnica'
		public Keyword getEvaluarTecnicaKeyword_1() { return cEvaluarTecnicaKeyword_1; }
	}
	public class TransicionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hwo.evtool.dsl.Evaluacion.Transicion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEventoCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEventoIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEventoCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateComponenteCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateComponenteIDTerminalRuleCall_2_0_1 = (RuleCall)cStateComponenteCrossReference_2_0.eContents().get(1);
		
		//Transicion:
		//	event=[Evento] '=>' state=[Componente];
		@Override public ParserRule getRule() { return rule; }
		
		//event=[Evento] '=>' state=[Componente]
		public Group getGroup() { return cGroup; }
		
		//event=[Evento]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//[Evento]
		public CrossReference getEventEventoCrossReference_0_0() { return cEventEventoCrossReference_0_0; }
		
		//ID
		public RuleCall getEventEventoIDTerminalRuleCall_0_0_1() { return cEventEventoIDTerminalRuleCall_0_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//state=[Componente]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[Componente]
		public CrossReference getStateComponenteCrossReference_2_0() { return cStateComponenteCrossReference_2_0; }
		
		//ID
		public RuleCall getStateComponenteIDTerminalRuleCall_2_0_1() { return cStateComponenteIDTerminalRuleCall_2_0_1; }
	}
	
	
	private final MaquinaEstadosElements pMaquinaEstados;
	private final EventoElements pEvento;
	private final ComponenteElements pComponente;
	private final EvaluacionesElements pEvaluaciones;
	private final ExpresionElements pExpresion;
	private final EvaluarEquipoElements pEvaluarEquipo;
	private final EvaluarPropuestaElements pEvaluarPropuesta;
	private final TipoEvaluacionElements pTipoEvaluacion;
	private final TipoEvaluarEquipoElements pTipoEvaluarEquipo;
	private final TipoEvaluarPropuestaElements pTipoEvaluarPropuesta;
	private final TransicionElements pTransicion;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EvaluacionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMaquinaEstados = new MaquinaEstadosElements();
		this.pEvento = new EventoElements();
		this.pComponente = new ComponenteElements();
		this.pEvaluaciones = new EvaluacionesElements();
		this.pExpresion = new ExpresionElements();
		this.pEvaluarEquipo = new EvaluarEquipoElements();
		this.pEvaluarPropuesta = new EvaluarPropuestaElements();
		this.pTipoEvaluacion = new TipoEvaluacionElements();
		this.pTipoEvaluarEquipo = new TipoEvaluarEquipoElements();
		this.pTipoEvaluarPropuesta = new TipoEvaluarPropuestaElements();
		this.pTransicion = new TransicionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hwo.evtool.dsl.Evaluacion".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MaquinaEstados:
	//	{MaquinaEstados} ('eventos'
	//	events+=Evento+)? ('resetEvents'
	//	resetEvents+=[Evento]+)? ('evaluaciones'
	//	commands+=Evaluaciones+)?
	//	states+=Componente*;
	public MaquinaEstadosElements getMaquinaEstadosAccess() {
		return pMaquinaEstados;
	}
	
	public ParserRule getMaquinaEstadosRule() {
		return getMaquinaEstadosAccess().getRule();
	}
	
	//Evento:
	//	name=ID code=ID;
	public EventoElements getEventoAccess() {
		return pEvento;
	}
	
	public ParserRule getEventoRule() {
		return getEventoAccess().getRule();
	}
	
	//Componente:
	//	'componente' name=ID ('actions' '{' actions+=[Evaluaciones]+ '}')?
	//	transitions+=Transicion*;
	public ComponenteElements getComponenteAccess() {
		return pComponente;
	}
	
	public ParserRule getComponenteRule() {
		return getComponenteAccess().getRule();
	}
	
	//Evaluaciones:
	//	TipoEvaluacion name=ID expresion=Expresion (':' comentario=STRING)?;
	public EvaluacionesElements getEvaluacionesAccess() {
		return pEvaluaciones;
	}
	
	public ParserRule getEvaluacionesRule() {
		return getEvaluacionesAccess().getRule();
	}
	
	//Expresion:
	//	'calificacion' ':' calificacion=(EvaluarPropuesta | EvaluarEquipo);
	public ExpresionElements getExpresionAccess() {
		return pExpresion;
	}
	
	public ParserRule getExpresionRule() {
		return getExpresionAccess().getRule();
	}
	
	//EvaluarEquipo Expresion:
	//	{Expresion} INT;
	public EvaluarEquipoElements getEvaluarEquipoAccess() {
		return pEvaluarEquipo;
	}
	
	public ParserRule getEvaluarEquipoRule() {
		return getEvaluarEquipoAccess().getRule();
	}
	
	//EvaluarPropuesta Expresion:
	//	{Expresion} 'A' | {Expresion} 'M' | {Expresion} 'B';
	public EvaluarPropuestaElements getEvaluarPropuestaAccess() {
		return pEvaluarPropuesta;
	}
	
	public ParserRule getEvaluarPropuestaRule() {
		return getEvaluarPropuestaAccess().getRule();
	}
	
	//TipoEvaluacion:
	//	TipoEvaluarPropuesta | TipoEvaluarEquipo;
	public TipoEvaluacionElements getTipoEvaluacionAccess() {
		return pTipoEvaluacion;
	}
	
	public ParserRule getTipoEvaluacionRule() {
		return getTipoEvaluacionAccess().getRule();
	}
	
	//TipoEvaluarEquipo:
	//	'EvaluarArquitecto';
	public TipoEvaluarEquipoElements getTipoEvaluarEquipoAccess() {
		return pTipoEvaluarEquipo;
	}
	
	public ParserRule getTipoEvaluarEquipoRule() {
		return getTipoEvaluarEquipoAccess().getRule();
	}
	
	//TipoEvaluarPropuesta:
	//	'EvaluarProblema' | 'EvaluarTecnica';
	public TipoEvaluarPropuestaElements getTipoEvaluarPropuestaAccess() {
		return pTipoEvaluarPropuesta;
	}
	
	public ParserRule getTipoEvaluarPropuestaRule() {
		return getTipoEvaluarPropuestaAccess().getRule();
	}
	
	//Transicion:
	//	event=[Evento] '=>' state=[Componente];
	public TransicionElements getTransicionAccess() {
		return pTransicion;
	}
	
	public ParserRule getTransicionRule() {
		return getTransicionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
