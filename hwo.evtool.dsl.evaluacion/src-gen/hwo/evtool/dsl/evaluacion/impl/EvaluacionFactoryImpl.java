/**
 * generated by Xtext 2.25.0
 */
package hwo.evtool.dsl.evaluacion.impl;

import hwo.evtool.dsl.evaluacion.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class EvaluacionFactoryImpl extends EFactoryImpl implements EvaluacionFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static EvaluacionFactory init()
  {
    try
    {
      EvaluacionFactory theEvaluacionFactory = (EvaluacionFactory)EPackage.Registry.INSTANCE.getEFactory(EvaluacionPackage.eNS_URI);
      if (theEvaluacionFactory != null)
      {
        return theEvaluacionFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new EvaluacionFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EvaluacionFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case EvaluacionPackage.MAQUINA_ESTADOS: return createMaquinaEstados();
      case EvaluacionPackage.EVENTO: return createEvento();
      case EvaluacionPackage.COMPONENTE: return createComponente();
      case EvaluacionPackage.EXPRESION: return createExpresion();
      case EvaluacionPackage.TIPO_EVALUACION: return createTipoEvaluacion();
      case EvaluacionPackage.TRANSICION: return createTransicion();
      case EvaluacionPackage.EVALUACION: return createEvaluacion();
      case EvaluacionPackage.CALIFICAR_PROPUESTA: return createCalificarPropuesta();
      case EvaluacionPackage.CALIFICAR_EQUIPO: return createCalificarEquipo();
      case EvaluacionPackage.CALIFICAR_OTROS: return createCalificarOtros();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case EvaluacionPackage.TIPO_EQUIPO:
        return createTipoEquipoFromString(eDataType, initialValue);
      case EvaluacionPackage.TIPO_PROPUESTA:
        return createTipoPropuestaFromString(eDataType, initialValue);
      case EvaluacionPackage.ECALIFICACION:
        return createE_CalificacionFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case EvaluacionPackage.TIPO_EQUIPO:
        return convertTipoEquipoToString(eDataType, instanceValue);
      case EvaluacionPackage.TIPO_PROPUESTA:
        return convertTipoPropuestaToString(eDataType, instanceValue);
      case EvaluacionPackage.ECALIFICACION:
        return convertE_CalificacionToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MaquinaEstados createMaquinaEstados()
  {
    MaquinaEstadosImpl maquinaEstados = new MaquinaEstadosImpl();
    return maquinaEstados;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Evento createEvento()
  {
    EventoImpl evento = new EventoImpl();
    return evento;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Componente createComponente()
  {
    ComponenteImpl componente = new ComponenteImpl();
    return componente;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expresion createExpresion()
  {
    ExpresionImpl expresion = new ExpresionImpl();
    return expresion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TipoEvaluacion createTipoEvaluacion()
  {
    TipoEvaluacionImpl tipoEvaluacion = new TipoEvaluacionImpl();
    return tipoEvaluacion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transicion createTransicion()
  {
    TransicionImpl transicion = new TransicionImpl();
    return transicion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Evaluacion createEvaluacion()
  {
    EvaluacionImpl evaluacion = new EvaluacionImpl();
    return evaluacion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CalificarPropuesta createCalificarPropuesta()
  {
    CalificarPropuestaImpl calificarPropuesta = new CalificarPropuestaImpl();
    return calificarPropuesta;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CalificarEquipo createCalificarEquipo()
  {
    CalificarEquipoImpl calificarEquipo = new CalificarEquipoImpl();
    return calificarEquipo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CalificarOtros createCalificarOtros()
  {
    CalificarOtrosImpl calificarOtros = new CalificarOtrosImpl();
    return calificarOtros;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TipoEquipo createTipoEquipoFromString(EDataType eDataType, String initialValue)
  {
    TipoEquipo result = TipoEquipo.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTipoEquipoToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TipoPropuesta createTipoPropuestaFromString(EDataType eDataType, String initialValue)
  {
    TipoPropuesta result = TipoPropuesta.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTipoPropuestaToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public E_Calificacion createE_CalificacionFromString(EDataType eDataType, String initialValue)
  {
    E_Calificacion result = E_Calificacion.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertE_CalificacionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EvaluacionPackage getEvaluacionPackage()
  {
    return (EvaluacionPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static EvaluacionPackage getPackage()
  {
    return EvaluacionPackage.eINSTANCE;
  }

} //EvaluacionFactoryImpl
