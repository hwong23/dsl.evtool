/*
 * generated by Xtext 2.25.0
 */
package hwo.evtool.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import hwo.evtool.dsl.ide.contentassist.antlr.internal.InternalEvaluacionParser;
import hwo.evtool.dsl.services.EvaluacionGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class EvaluacionParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(EvaluacionGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, EvaluacionGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementTypeAccess().getAlternatives(), "rule__ElementType__Alternatives");
			builder.put(grammarAccess.getBasicTypeAccess().getTypeNameAlternatives_0(), "rule__BasicType__TypeNameAlternatives_0");
			builder.put(grammarAccess.getCmpnntEvaluacionAccess().getGroup(), "rule__CmpnntEvaluacion__Group__0");
			builder.put(grammarAccess.getCmpnntEvaluacionAccess().getGroup_2(), "rule__CmpnntEvaluacion__Group_2__0");
			builder.put(grammarAccess.getCriterioAccess().getGroup(), "rule__Criterio__Group__0");
			builder.put(grammarAccess.getCriterioTypeAccess().getGroup(), "rule__CriterioType__Group__0");
			builder.put(grammarAccess.getCriterioTypeAccess().getGroup_1(), "rule__CriterioType__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getEntitiesAssignment(), "rule__Model__EntitiesAssignment");
			builder.put(grammarAccess.getCmpnntEvaluacionAccess().getNameAssignment_1(), "rule__CmpnntEvaluacion__NameAssignment_1");
			builder.put(grammarAccess.getCmpnntEvaluacionAccess().getSuperTypeAssignment_2_1(), "rule__CmpnntEvaluacion__SuperTypeAssignment_2_1");
			builder.put(grammarAccess.getCmpnntEvaluacionAccess().getAttributesAssignment_4(), "rule__CmpnntEvaluacion__AttributesAssignment_4");
			builder.put(grammarAccess.getCriterioAccess().getTypeAssignment_0(), "rule__Criterio__TypeAssignment_0");
			builder.put(grammarAccess.getCriterioAccess().getNameAssignment_1(), "rule__Criterio__NameAssignment_1");
			builder.put(grammarAccess.getCriterioTypeAccess().getElementTypeAssignment_0(), "rule__CriterioType__ElementTypeAssignment_0");
			builder.put(grammarAccess.getCriterioTypeAccess().getArrayAssignment_1_0(), "rule__CriterioType__ArrayAssignment_1_0");
			builder.put(grammarAccess.getCriterioTypeAccess().getLengthAssignment_1_1(), "rule__CriterioType__LengthAssignment_1_1");
			builder.put(grammarAccess.getBasicTypeAccess().getTypeNameAssignment(), "rule__BasicType__TypeNameAssignment");
			builder.put(grammarAccess.getComponenteTypeAccess().getEntityAssignment(), "rule__ComponenteType__EntityAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private EvaluacionGrammarAccess grammarAccess;

	@Override
	protected InternalEvaluacionParser createParser() {
		InternalEvaluacionParser result = new InternalEvaluacionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EvaluacionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EvaluacionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
